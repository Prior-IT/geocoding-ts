// Generated by ts-to-zod
import { z } from "zod";

const optionsSchema = z.object({
  languages: z.array(z.string()).optional(),
  countryCodes: z.array(z.string()).optional(),
  dedupeResults: z.boolean().optional(),
});

const searchOptionsSchema = z
  .object({
    fullAddress: z.boolean().optional(),
    limit: z.number().optional(),
    boundingBox: z
      .tuple([z.number(), z.number(), z.number(), z.number()])
      .optional(),
  })
  .and(optionsSchema);

const reverseOptionsSchema = z
  .object({
    zoomlevel: z.number().optional(),
  })
  .and(optionsSchema);

const addressQuerySchema = z.object({
  street: z.string().optional(),
  city: z.string().optional(),
  county: z.string().optional(),
  state: z.string().optional(),
  country: z.string().optional(),
  postal_code: z.string().optional(),
});

export const geocodingErrorSchema = z.object({
  is_error: z.literal(true),
  error: z.string(),
});

export const addressSchema = z.object({
  name: z.string().optional(),
  road: z.string().optional(),
  house_number: z.string().optional(),
  suburb: z.string().optional(),
  village: z.string().optional(),
  pedestrian: z.string().optional(),
  neighborhood: z.string().optional(),
  hamlet: z.string().optional(),
  town: z.string().optional(),
  city: z.string().optional(),
  county: z.string().optional(),
  region: z.string().optional(),
  state_district: z.string().optional(),
  "ISO3166-2-lvl6": z.string().optional(),
  state: z.string().optional(),
  "ISO3166-2-lvl4": z.string().optional(),
  postcode: z.string().optional(),
  country: z.string(),
  country_code: z.string(),
});

export const placeSchema = z.object({
  is_error: z.literal(false).optional(),
  place_id: z.number(),
  licence: z.string(),
  osm_type: z.union([
    z.literal("way"),
    z.literal("node"),
    z.literal("relation"),
  ]),
  osm_id: z.number(),
  boundingbox: z.tuple([z.string(), z.string(), z.string(), z.string()]),
  lat: z.string(),
  lon: z.string(),
  display_name: z.string(),
  place_rank: z.number(),
  category: z.string(),
  type: z.string(),
  importance: z.number(),
  icon: z.string().optional(),
  addresstype: z.string().optional(),
  extratags: z.record(z.string()).optional(),
  namedetails: z.record(z.string()).optional(),
  address: addressSchema.optional(),
  name: z.string().optional().nullable(),
  geojson: z.any().optional(),
  geokml: z.string().optional(),
  svg: z.string().optional(),
  geotext: z.string().optional(),
});
